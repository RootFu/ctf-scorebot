import threading
import subprocess
import os
import time

from scorebot.common.tasks.TaskRunner import TaskRunner

class UsenixExploitTask():
	
	def __init__(self,script,team,logger):
		self.logger = logger

		if(self.logger != None):
			
			self.logger.debug("Creating UsenixExploitTask: %r %r" % (script,team.host))

		thread_size = threading.stack_size(524288)
		self.runner = TaskRunner()
		self.runner.start()
		
		self.script = script
		self.line_q = None
		self.team = team
		self.cookie = None
		self.exploit_success = False
		self.captured_flags = []

		threading.stack_size(thread_size)

	def launch(self):

		cmd = [self.script,self.team.host]
		if(self.cookie != None):
			cmd.append(self.cookie)

		if(self.logger != None):
			script_name = os.path.basename(self.script)
			ip = self.team.host
			cookie = self.cookie
			self.logger.debug("Starting UsenixExploitTask: script=%r ip=%r cookie=%r" % (script_name,ip,cookie))

		self.line_q = self.runner.taskStart(cmd)

	def isAlive(self):
		return self.runner.taskAlive()

	def stop(self):
		if(self.logger != None):
			self.logger.debug("Stopping UsenixExploitTask: %r %r" % (self.script,self.team.host))
		self.runner.taskStop()

	def quit(self):
		self.runner.quit()

	def processOutput(self):
		assert(self.line_q != None)
		count = self.line_q.qsize()

		for i in xrange(count):
			line = self.line_q.get(False)
			assert(line != None)

			if(line == ""):
				continue

			if(self.logger != None):
				self.logger.info("(%s) %r" % (self.team.host,line))

			if(line.startswith("FLAG:")):
				self.captured_flags.append(line[5:].strip())

			if(line.startswith("COOKIE:")):
				self.cookie = line[7:].strip()

			if(line.startswith("EXPLOIT:")):
				success_txt = line[8:].strip().upper()
				if(success_txt == "SUCCESS"):
					self.exploit_success = True

			line = None 

	def collectFlags(self):
		flags = self.captured_flags
		self.captured_flags = []
		return flags

	def clearExploitSuccess(self):
		self.exploit_success = False

	def exploitSuccess(self):
		return self.exploit_success

	def getTeam(self):
		return self.team
