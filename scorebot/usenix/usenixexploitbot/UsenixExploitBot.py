import time
import os
import stat
import Queue
import random

from multiprocessing import Process

from scorebot.common.communication.BotCommClient import BotCommClient
from scorebot.common.communication.BotMessage import BotMessage

from scorebot.gamelogic.usenix.usenixexploitbot.UsenixExploitTask import UsenixExploitTask

class UsenixExploitBot(Process):

	def __init__(self,conf,init=False):
		Process.__init__(self)
		self.conf = conf
		self.comm = None
		self.logger = conf.buildLogger("UsenixExploitBot")
		self.usenix_conf = self.conf.getSection("USENIX_CONFIG")
		self.exploits = {}
		
	def run(self):
		self.__processConfig()

		server_info = self.conf.getGameStateServerInfo()
		self.comm = BotCommClient(
			server_info.host,
			server_info.port,
			server_info.key,
			server_info.iv,
			"USENIX_EXPLOIT_BOT")

		self.comm.start()

		while(True):
			msg = self.comm.receive()
			self.logger.debug("recvd msg: %s (%r)" % (msg.type,str(msg.data)))

			if(msg.type == "TERMINATE"):
				self.logger.info("Received TERM message from gameserver")
				break

			elif(msg.type == "EXECUTE_ROUND"):
				results = self.__executeExploits(msg.data)
				self.comm.send(BotMessage("USENIX_EXPLOIT_RESULTS",results))
			else:
				assert(False),"Invalid msg type received"

		self.comm.kill()


	def __executeExploits(self,round):
		self.logger.info("=== Exploit Round(%d) Starting ===" % round)
		all_tasks = []

		#Select exploits for this round
		for service,exploit_tasks in self.exploits.items():
			exploit,exploit_task_list = random.choice(exploit_tasks)
			self.logger.info("Using %s against service %s" % (exploit.name,service))
			all_tasks.append((exploit,exploit_task_list))

		#Start selected exploits
		for exploit,exploit_task_list in all_tasks:
			for exploit_task in exploit_task_list:
				exploit_task.launch()


		#time.sleep(usenix_conf.exploit_round_time_seconds)
		#Run selected exploits
		exploit_round_time = int(self.usenix_conf.getExploitRoundTime())
		for i in xrange(exploit_round_time):
			for exploit,exploit_task_list in all_tasks:
				for exploit_task in exploit_task_list:
					exploit_task.processOutput()
			time.sleep(1)

		#Stop selected exploits
		self.logger.info("=== Exploit Round(%d) Ending ===" % round)
		for exploit,exploit_task_list in all_tasks:
			for exploit_task in exploit_task_list:
				exploit_task.stop()
				exploit_task.processOutput()

		#Generate results
		results = []
		for exploit,exploit_task_list in all_tasks:
			team_results = []
			for exploit_task in exploit_task_list:
				team = exploit_task.getTeam()
				teamId = team.id
				flags = exploit_task.collectFlags()
				success = exploit_task.exploitSuccess()
				team_results.append((teamId,success,flags))
				exploit_task.clearExploitSuccess()
				self.logger.debug("Results: Exploit=%s Team=%s Success=%s Num Flags=%d" %(
					exploit.name,team.name,str(success),len(flags)))
			results.append((exploit.id,team_results))

		return results
				
	def __processConfig(self):
		for exploit in self.usenix_conf.exploits:
			if(exploit.service not in self.exploits):
				self.exploits[exploit.service] = []

			exploit_tasks = []
			task_logger = self.conf.buildLogger("Exploit-%s " %exploit.name)
			task_path = os.path.join(self.usenix_conf.exploit_dir,exploit.name)
			for team in self.conf.teams:
				task = UsenixExploitTask(task_path,team,task_logger)
				exploit_tasks.append(task)

			self.exploits[exploit.service].append((exploit,exploit_tasks))
